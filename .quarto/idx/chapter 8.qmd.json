{"title":"Модель Catch-Survey Analysis (CSA)","markdown":{"yaml":{"title":"Модель Catch-Survey Analysis (CSA)","format":"html"},"headingText":"Введение","containsRefs":false,"markdown":"\n\n\nМодель \"анализа уловов и съемок\" - Catch-Survey Analysis (CSA) представляет собой инструмент для оценки состояния запасов, особенно тех видов, данные по индивидуальному возрасту которых труднодоступны или отсутствуют, что типично для многих беспозвоночных, таких как крабы, креветки, а также для некоторых рыб. В отличие от классических продукционных моделей, которые оперируют агрегированными показателями всей популяции и требуют строгих допущений о ее равновесном состоянии и постоянной емкости среды, когортные модели, подобные CSA, позволяют отслеживать судьбу отдельных функциональных категорий (например, пререкруты, рекруты, пострекруты). Они явным образом учитывают такие процессы, как рост, пополнение и естественная смертность, разделяя запас на дискретные размерные или возрастные группы. Это дает несомненное преимущество при анализе динамики популяций с выраженной цикличностью или тех, которые подвергаются интенсивному промысловому прессу, избирательно воздействующему на определенные размерные или возрастные категории (например, пререкруты не подвержены прямой прмысловой смертности в отличие от рекрутов и посрекрутов). Подробнее о модели и ее реализации можно почитать в статье [\"Результаты применения стохастической когортной модели CSA для оценки запаса камчатского краба Paralithodes camtschaticus в Баренцевом море\"](https://mombus.github.io/cRab/data/CSA.pdf). В статье описывается реализация модели в программе OpenBUGS, которая в упрощенном виде (без прогноза, риск-анализа и диагностики) и в учебных целях была переведена в среду R и представлена ниже, а полный срипт [здесь](https://mombus.github.io/cRab/data/CSA.R).Также доступна иммитационная CSA модель для 4 размерных групп, реализованная в MS Excel по [ссылке](https://mombus.github.io/cRab/data/CSA.xlsx).\n\nДанная реализация модели представляет собой байесовский подход к оценке запасов, который позволяет учитывать неопределенности как в процессе динамики популяции, так и в процессе наблюдений, что особенно важно при работе с данными, характеризующимися высокой вариабельностью и неполнотой. В основе модели лежит разделение популяции на три размерно-возрастные группы: пререкруты (P1), рекруты (R) и пострекруты (P), что соответствует биологическим особенностям многих видов крабов, включая камчатского краба. Модель включает два основных компонента: динамику процесса, описывающую естественные изменения численности популяции, и модель наблюдений, связывающую ненаблюдаемые \"истинную\" численность запаса с доступными данными съемок (индексами численности пререкрутов, рекрутов и пострекрутов). Уравнения процессной динамики для пострекрутов имеют вид:\n\nP\\[i\\] = \\[(P1\\[i-1\\]×Gp×Mp) + R\\[i-1\\] + P\\[i-1\\] - catch\\[i-1\\]\\] × exp(-M) + εP, где\n\nGp обозначает вероятность перехода пререкрутов в пострекруты,\n\nMp - вероятность линьки пререкрутов,\n\nM - коэффициент естественной смертности, а εP представляет собой процессную ошибку.\n\nДля рекрутов уравнение динамики выглядит как\n\nR\\[i\\] = (P1\\[i-1\\]×Gr×Mp) × exp(-M) + εR, где\n\nGr - вероятность перехода пререкрутов в рекруты. Динамика пререкрутов моделируется как лог-случайное блуждание P1\\[i\\] = P1\\[i-1\\] + εP1. Модель наблюдений предполагает, что данные траловых съемок соответствуют логнормальному распределению относительно истинной численности, умноженной на коэффициент улавливаемости:\n\nbioindexP1\\[i\\] \\~ lognormal(log(q1×P1\\[i\\]), precbioindexP1),\n\nаналогично для рекрутов и пострекрутов, где q1, q2, q3 - коэффициенты улавливаемости для каждой группы, а precbioindex - параметры точности. В байесовском подходе ключевую роль играют априорные распределения параметров, которые в данной реализации задаются как равномерные для коэффициентов улавливаемости (q1, q2, q3 \\~ dunif(0.1,1)), нормальные для вероятностей перехода (Gr \\~ dnorm(0.9,500), Gp \\~ dnorm(0.075,500), Mp \\~ dnorm(0.95,500)) и для коэффициента естественной смертности (M \\~ dnorm(0.2,100)). Использование байесовского подхода позволяет не только получить точечные оценки параметров, но и оценить полные апостериорные распределения, что дает возможность проводить риск-анализ различных сценариев управления запасом. В данном занятии мы реализуем модель CSA в среде R с использованием пакетов rjags и coda, что позволяет эффективно работать с байесовскими иерархическими моделями через интерфейс с программой JAGS, которую также необходимо установить.\n\nМы рассмотрим полный цикл работы с моделью: от подготовки данных и задания априорных распределений до обучения модели и анализа результатов, включая визуализацию априорных и апостериорных распределений параметров, анализ остатков и сравнение моделируемой и фактической динамики запаса. Особое внимание будет уделено интерпретации результатов в контексте управления водными биоресурсами, что является ключевой целью применения подобных моделей в практической деятельности гидробиологов и ихтиологов. \\## Загрузка данных и первичный осмотр\n\n## Реализация модели\n\n```{r}\n# ========================================================================================================================\n# ПРАКТИЧЕСКОЕ ЗАНЯТИЕ: МОДЕЛЬ Catch-Survey Analysis (CSA) - три категории (пререкруты (P1), рекруты (R), пострекруты (P)\n# Курс: \"Оценка водных биоресурсов в среде R (для начинающих)\"\n# Автор: Баканев С. В. Дата: 20.08.2025\n# Структура:\n# 1) Входные данные\n# 2) Модель\n# 3) Прайеры\n# 4) Обучение модели\n# 5) Подготовка выходных данных \n# 6) Анализ результатов (визуализация априорных и апостериорных параметров;бабл-плоты остатков;  динамика индексов) \n# ========================================================================================================================\n# Установка рабочей директории\nsetwd(\"C:/CSA\")\n\n# Подключение необходимых библиотек\n# install.packages(c(\"rjags\", \"coda\"))  # Раскомментировать для установки\nlibrary(rjags)  # Для работы с JAGS\nlibrary(coda)   # Для анализа MCMC-выхода\nlibrary(ggplot2)# Рисунки\n\n# ========================================================================================================================\n# --- Входные данные ---\n# ========================================================================================================================\ndata_list <- list(\n  N = 16,# Количество временных точек\n # Наблюдаемые данные (индексы запаса)\n  bioindexP1 = c(1500,1028,554,887,1345,1817,2291,1958,1500,1028,554,887,1345,1817,2291,1958),\n  bioindexR  = c(2531,1927,1305,764,1216,\t1820,2442,2983,2531,1927,1305,764,1216,1820,2442,2983),\n  bioindexP  = c(13741,13770,13060,11653,9782,8634,8321,8793,9809,10177,9776,9566,8789,8640,9240,10547),\n  catch      = c(6,2,6,15,21,37,37,315,945,890,991,1060,1000,1000,1600,1673,1250)\n)\n\n# Создание вектора лет для подписей\nYEAR <- 2000 + 0:(data_list$N - 1)\n\n# ========================================================================================================================\n# --- Генерация модели CSA --\n# ========================================================================================================================\nmodel_string <- \"\nmodel {\n # Модель наблюдений (связь ненаблюдаемых состояний с данными)\n  for (i in 1:N) {\n    # Медиана для P1 в лог-нормальном распределении\n    bioindexP1med[i] <- log(1.0E-6 + q1 * P1[i])\n    # Наблюдения для P1 следуют лог-нормальному распределению\n    bioindexP1[i] ~ dlnorm(bioindexP1med[i], precbioindexP1)\n\n    # Аналогично для R\n    bioindexRmed[i]  <- log(1.0E-6 + q2 * R[i])\n    bioindexR[i] ~ dlnorm(bioindexRmed[i],  precbioindexR)\n\n    # Аналогично для P\n    bioindexPmed[i]  <- log(1.0E-6 + q3 * P[i])\n    bioindexP[i] ~ dlnorm(bioindexPmed[i],  precbioindexP)\n  }\n\n  # Динамика состояний (модель процесса)\n  inv_surv <- exp(-M)# Коэффициент естественной смертности\n  for (i in 2:N) {\n    # Динамика для P (с защитой от отрицательных значений)\n    tmpPraw[i] <- (P1[i-1]*Gp*Mp + R[i-1] + P[i-1] - catch[i-1]) * inv_surv\n    tmpPpos[i] <- tmpPraw[i] * step(tmpPraw[i]) # Обнуляем если отрицательный\n    Pmed[i] <- log(1.0E-6 + tmpPpos[i])# Медиана в лог-пространстве\n    P[i] ~ dlnorm(Pmed[i], precP)# Процессная ошибка для P\n\n    # Динамика для R (аналогично P)\n    tmpRraw[i] <- (P1[i-1]*Gr*Mp) * inv_surv\n    tmpRpos[i] <- tmpRraw[i] * step(tmpRraw[i])\n    Rmed[i] <- log(1.0E-6 + tmpRpos[i])\n    R[i] ~ dlnorm(Rmed[i], precR)\n\n   # Динамика для P1 (лог-случайное блуждание)\n    P1med[i] <- log(1.0E-6 + P1[i-1])\n    P1[i] ~ dlnorm(P1med[i], precP1)\n  }\n\n  # Risk\n  for (i in 1:N) {\n    PR[i] <- P[i] + R[i]\n    p.PRlim[i] <- step(PRlim - PR[i])\n  }\n  PRlim <- 4000\n\n# ========================================================================================================================\n#       ПРАЙЕРЫ - PRIORS\n# ========================================================================================================================\n  #  # Априорные распределения параметров (Priors)\n  P1[1] ~ dunif(200,4000)\n  P[1]  ~ dunif(200,6000)\n  R[1]  ~ dunif(200,25000)\n\n  Gr ~ dnorm(0.9,  500)\n  Gp ~ dnorm(0.075,500)\n  Mp ~ dnorm(0.95, 500)\n\n # Точности для ошибок наблюдений\n  precbioindexP1 ~ dgamma(12.22, 1.1)\n  precbioindexR  ~ dgamma(12.22, 1.1)\n  precbioindexP  ~ dgamma(12.22, 1.1)\n\n #Прайеры для коэффициентов улавливаемости (catchability)\n  q1 ~ dunif(0.1,1)\n  q2 ~ dunif(0.1,1)\n  q3 ~ dunif(0.1,1) \n\n  # Точности для ошибок процесса\n  precP1 ~ dgamma(12.22, 1.1)\n  precR  ~ dgamma(12.22, 1.1)\n  precP  ~ dgamma(12.22, 1.1)\n\n# Прайер для коэффициента естественной смертности\n  M ~ dnorm(0.2, 100)\n}\n\"\n\n\n# ========================================================================================================================\n# --- Обучение модели ---\n# ========================================================================================================================\nset.seed(1)  # Для воспроизводимости\n# Инициализация модели JAGS\njm <- jags.model(\n  textConnection(model_string),  # Модель из строки\n  data = data_list,             # Данные\n  n.chains = 3,                 # Количество цепей\n  n.adapt = 1500                # Длина адаптационной фазы\n)\n# Обновление модели (burn-in)\nupdate(jm, 4000)\n\n# Переменные для мониторинга\nvars_to_monitor <- c(\n  \"M\",\"Gp\",\"Gr\",\"Mp\",\"q1\",\"q2\",\"q3\",                    # Параметры\n  \"precP\",\"precP1\",\"precR\",\"precbioindexP\",\"precbioindexP1\",\"precbioindexR\",  # Точности\n  \"P\",\"P1\",\"R\",\"PR\",\"p.PRlim\"                           # Состояния и производные\n)\n\n\n# Генерация MCMC-выборок\nsamps <- coda.samples(\n  jm, \n  variable.names = vars_to_monitor,  # Мониторируемые переменные\n  n.iter = 6000,                     # Длина выборки\n  thin = 3                           # Прореживание\n)\n# ========================================================================================================================\n# --- Анализ результатов ---\n# ========================================================================================================================\n# Стандартная статистика по выборкам\nsm <- summary(samps)\nstats <- sm$statistics   # Средние, SD, стандартные ошибки\nquants <- sm$quantiles   # Квантили (2.5%, 25%, 50%, 75%, 97.5%)\n\n# Матрица всех сэмплов для ручных вычислений\ndraws_mat <- as.matrix(samps)\n\n# Функция для расчета MC ошибки через эффективный размер выборки\nmcse_from_ess <- function(vec) {\n  ess <- effectiveSize(as.mcmc(vec))  # Эффективный размер выборки\n  sd(vec) / sqrt(as.numeric(ess))     # MC ошибка\n}\n\n# Функция для создания строки результата\nmake_row <- function(year, mapping, node, mean, sd, mcse, q2.5, q25, q50, q75, q97.5) {\n  data.frame(\n    YEAR = year,\n    `#Vectors to monitor` = mapping,\n    node = node,\n    mean = mean,\n    sd = sd,\n    `MC error` = mcse,\n    `2.50%` = q2.5,\n    `25.00%` = q25,\n    median = q50,\n    `75.00%` = q75,\n    `97.50%` = q97.5,\n    check.names = FALSE\n  )\n}\n\n# Список для накопления результатов\nrows <- list()\n\n# Функция добавления скалярных параметров\nadd_scalar <- function(x_idx, vname) {\n  if (vname %in% rownames(stats)) {\n    # Если параметр есть в готовой статистике\n    m <- stats[vname, \"Mean\"]\n    s <- stats[vname, \"SD\"]\n    mcse <- mcse_from_ess(draws_mat[, vname])\n    q <- quants[vname, c(\"2.5%\", \"25%\", \"50%\", \"75%\", \"97.5%\")]\n    rows[[length(rows) + 1]] <<- make_row(NA, paste0(\"x[\", x_idx, \"]<-\", vname), paste0(\"x[\", x_idx, \"]\"),\n                                          m, s, mcse, q[1], q[2], q[3], q[4], q[5])\n  } else if (vname %in% c(\"sigmaP1\",\"sigmaR\",\"sigmaP\")) {\n    # Для стандартных отклонений (преобразуем из точности)\n    src <- switch(vname,\n                  sigmaP1 = \"precP1\",\n                  sigmaR  = \"precR\",\n                  sigmaP  = \"precP\")\n    if (src %in% colnames(draws_mat)) {\n      vec <- sqrt(1 / draws_mat[, src])  # Преобразование precision -> sigma\n      m <- mean(vec); s <- sd(vec); mcse <- mcse_from_ess(vec)\n      q <- quantile(vec, c(0.025,0.25,0.5,0.75,0.975))\n      rows[[length(rows) + 1]] <<- make_row(NA, paste0(\"x[\", x_idx, \"]<-\", vname), paste0(\"x[\", x_idx, \"]\"),\n                                            m, s, mcse, q[1], q[2], q[3], q[4], q[5])\n    }\n  }\n}\n\n# Добавление основных параметров\nadd_scalar(1,  \"M\")\nadd_scalar(2,  \"q1\")\nadd_scalar(3,  \"q2\")\nadd_scalar(4,  \"q3\")\nadd_scalar(5,  \"sigmaP1\")\nadd_scalar(6,  \"sigmaR\")\nadd_scalar(7,  \"sigmaP\")\nadd_scalar(8,  \"precbioindexP1\")\nadd_scalar(9,  \"precbioindexR\")\nadd_scalar(10, \"precbioindexP\")\nadd_scalar(11, \"Gr\")\nadd_scalar(12, \"Gp\")\nadd_scalar(13, \"Mp\")\n\n# Функция добавления временных рядов\nadd_series <- function(base_idx, varname, years) {\n  for (i in seq_along(years)) {\n    rn <- paste0(varname, \"[\", i, \"]\")  # Имя переменной с индексом\n    if (!rn %in% rownames(stats)) next  # Пропуск если нет данных\n    m <- stats[rn, \"Mean\"]\n    s <- stats[rn, \"SD\"]\n    mcse <- mcse_from_ess(draws_mat[, rn])\n    q <- quants[rn, c(\"2.5%\", \"25%\", \"50%\", \"75%\", \"97.5%\")]\n    xi <- base_idx + (i - 1)  # Вычисление индекса в выходной таблице\n    rows[[length(rows) + 1]] <<- make_row(years[i], paste0(\"x[\", xi, \"]<-\", rn), paste0(\"x[\", xi, \"]\"),\n                                          m, s, mcse, q[1], q[2], q[3], q[4], q[5])\n  }\n}\n\n# Добавление временных рядов\nadd_series(100, \"P1\", YEAR)\nadd_series(200, \"R\",  YEAR)\nadd_series(300, \"P\",  YEAR)\n\n# Создание итоговой таблицы\nout_df <- do.call(rbind, rows)\n\n# Создание групп для сортировки\nout_df$group <- ifelse(is.na(out_df$YEAR), \"param\",\n                ifelse(grepl(\"<-P1\\\\[\", out_df$`#Vectors to monitor`), \"P1\",\n                ifelse(grepl(\"<-R\\\\[\",  out_df$`#Vectors to monitor`), \"R\", \"P\")))\n\n# Сортировка параметров по индексу\nparam_rows <- out_df[out_df$group == \"param\", ]\nparam_idx  <- as.numeric(sub(\".*\\\\[(\\\\d+)\\\\].*\", \"\\\\1\", param_rows$node))\nparam_rows <- param_rows[order(param_idx), ]\n\n# Сортировка временных рядов по году\np1_rows <- out_df[out_df$group == \"P1\", ]\np1_rows <- p1_rows[order(p1_rows$YEAR), ]\n\nr_rows  <- out_df[out_df$group == \"R\", ]\nr_rows  <- r_rows[order(r_rows$YEAR), ]\n\np_rows  <- out_df[out_df$group == \"P\", ]\np_rows  <- p_rows[order(p_rows$YEAR), ]\n\n# Компоновка финальной таблицы\nout_df <- rbind(param_rows, p1_rows, r_rows, p_rows)\nout_df$group <- NULL  # Удаление вспомогательной колонки\n\n# Сохранение результатов\nwrite.csv(out_df, \"monitor_summary.csv\", row.names = FALSE)\ncat(\"Saved: monitor_summary.csv\\n\")\n\n# Вывод структуры результатов\nstr(out_df)\n\n# ========================================================================================================================\n# Визуализация априорных и апостериорных параметров\n# Параметры: M, Gp, Gr, Mp, q1, q2, q3, precP1, precR, precP, precbioindexP1, precbioindexR, precbioindexP\n# И производные: sigmaP1, sigmaR, sigmaP\n# ========================================================================================================================\n\n# Сэмплируем приоры прямо из той же JAGS-модели (без данных)\nsample_priors_from_model <- function(model_string, n_iter = 20000, n_adapt = 500) {\n  jm_prior <- jags.model(textConnection(model_string), data = list(N = 0), n.chains = 1, n.adapt = n_adapt)\n  vars <- c(\"M\",\"Gp\",\"Gr\",\"Mp\",\"q1\",\"q2\",\"q3\",\n            \"precP1\",\"precR\",\"precP\",\"precbioindexP1\",\"precbioindexR\",\"precbioindexP\")\n  priors <- coda.samples(jm_prior, variable.names = vars, n.iter = n_iter)\n  as.matrix(priors)\n}\n\n# Получаем матрицы приоров и постериоров\nprior_mat <- sample_priors_from_model(model_string, n_iter = 20000, n_adapt = 500)\npost_mat  <- as.matrix(samps)\n\n# Добавляем производные сигмы из прецизионов\nadd_sigmas <- function(mat) {\n  add <- function(dst, src) {\n    if (all(src %in% colnames(mat))) dst <- cbind(dst, setNames(as.data.frame(sqrt(1/mat[, src, drop=FALSE])), gsub(\"^prec\",\"sigma\", src)))\n    dst\n  }\n  out <- mat\n  out <- add(out, c(\"precP1\"))\n  out <- add(out, c(\"precR\"))\n  out <- add(out, c(\"precP\"))\n  out\n}\nprior_mat <- add_sigmas(prior_mat)\npost_mat  <- add_sigmas(post_mat)\n\n# Список параметров для визуализации\nparams <- intersect(\n  c(\"M\",\"Gp\",\"Gr\",\"Mp\",\"q1\",\"q2\",\"q3\",\n    \"sigmaP1\",\"sigmaR\",\"sigmaP\",\n    \"precbioindexP1\",\"precbioindexR\",\"precbioindexP\"),\n  union(colnames(prior_mat), colnames(post_mat))\n)\n\n# В long-формат\nmk_df <- function(mat, label) {\n  if (is.null(mat) || nrow(mat) == 0) return(data.frame())\n  mat <- mat[, intersect(colnames(mat), params), drop = FALSE]\n  reshape(\n    data.frame(iter = seq_len(nrow(mat)), mat, check.names = FALSE),\n    direction = \"long\", varying = params, v.names = \"value\", timevar = \"param\", times = params\n  )[, c(\"param\",\"value\")]\n}\nprior_df <- mk_df(prior_mat, \"Prior\"); prior_df$dist <- \"Prior\"\npost_df  <- mk_df(post_mat,  \"Posterior\"); post_df$dist <- \"Posterior\"\nplot_df  <- rbind(prior_df, post_df)\n\n# Подписи\nparam_labels <- c(\n  M=\"M (mortality)\", Gp=\"Gp\", Gr=\"Gr\", Mp=\"Mp\",\n  q1=\"q1\", q2=\"q2\", q3=\"q3\",\n  sigmaP1=\"sigmaP1\", sigmaR=\"sigmaR\", sigmaP=\"sigmaP\",\n  precbioindexP1=\"precbioindexP1\", precbioindexR=\"precbioindexR\", precbioindexP=\"precbioindexP\"\n)\nplot_df$param_f <- factor(plot_df$param, levels = params, labels = unname(param_labels[params]))\n\n# График prior vs posterior (берёт priors из модели!)\nlibrary(ggplot2)\nggplot(plot_df, aes(x = value, color = dist, fill = dist)) +\n  geom_density(alpha = 0.25, linewidth = 0.7) +\n  facet_wrap(~ param_f, scales = \"free\", ncol = 4) +\n  scale_color_manual(values = c(\"Prior\" = \"#999999\", \"Posterior\" = \"#1b9e77\")) +\n  scale_fill_manual(values  = c(\"Prior\" = \"#bbbbbb\", \"Posterior\" = \"#1b9e77\")) +\n  labs(title = \"Априорные (из модели) vs апостериорные распределения\",\n       x = \"Значение\", y = \"Плотность\", color = \"\", fill = \"\") +\n  theme_minimal(base_size = 12) +\n  theme(legend.position = \"top\")\n\n\n# ========================================================================================================================\n# Бабл-плоты остатков P1, R, P по годам (2000–2015)\n# Требуется: объекты samps, data_list. Если YEAR не создан, создадим.\n# ========================================================================================================================\n\nif (!exists(\"YEAR\")) YEAR <- 2000 + 0:(data_list$N - 1)\ndraws_mat <- as.matrix(samps)\neps <- 1.0e-6\n\nresid_bubble_summary <- function(series, obs_vec, q_name, state_name_prefix) {\n  rows <- list()\n  for (i in seq_along(obs_vec)) {\n    if (is.na(obs_vec[i])) next\n    q_draws     <- draws_mat[, q_name]\n    state_draws <- draws_mat[, paste0(state_name_prefix, \"[\", i, \"]\")]\n    # residual per draw: log(observed) - log(expected)\n    res_draws <- log(obs_vec[i]) - log(eps + q_draws * state_draws)\n    r_mean <- mean(res_draws, na.rm = TRUE)\n    rows[[length(rows) + 1]] <- data.frame(\n      YEAR = YEAR[i],\n      series = series,\n      resid = r_mean,\n      abs_resid = abs(r_mean),\n      sign = ifelse(r_mean >= 0, \"pos\", \"neg\")\n    )\n  }\n  do.call(rbind, rows)\n}\n\nb1 <- resid_bubble_summary(\"P1\", data_list$bioindexP1, \"q1\", \"P1\")\nb2 <- resid_bubble_summary(\"R\",  data_list$bioindexR,  \"q2\", \"R\")\nb3 <- resid_bubble_summary(\"P\",  data_list$bioindexP,  \"q3\", \"P\")\nbubbles <- rbind(b1, b2, b3)\n\n# Порядок рядов сверху вниз: P1, R, P\nbubbles$series <- factor(bubbles$series, levels = c(\"P1\", \"R\", \"P\"))\n\n# Убираем пустое расстояние - используем минимальные интервалы\nlvl <- c(\"P1\",\"R\",\"P\")\ny_map <- setNames(c(1, 2, 3), lvl)  # Числовые позиции без больших промежутков\n\nbubbles$y_pos <- unname(y_map[as.character(bubbles$series)])\n\n# Создаем вытянутый прямоугольный график\nggplot(bubbles, aes(x = YEAR, y = y_pos)) +\n  geom_point(aes(size = abs_resid, fill = sign), shape = 21, color = \"black\", alpha = 0.9) +\n  scale_fill_manual(values = c(neg = \"black\", pos = \"white\"),\n                    breaks = c(\"pos\",\"neg\"),\n                    labels = c(\"положительные\",\"отрицательные\"),\n                    name = \"\") +\n  scale_size_area(max_size = 12, name = \"Остатки\") +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  scale_y_continuous(breaks = unname(y_map), \n                     labels = names(y_map),\n                     limits = c(0.5, 3.5),  # Убираем пустое пространство сверху и снизу\n                     expand = c(0, 0)) +     # Убираем расширение осей\n  labs(title = \"Пузырьковая диаграмма остатков (лог-шкала): P1, R, P\", \n       x = \"Год\", \n       y = \"\") +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = \"top\",\n    panel.grid.major.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    aspect.ratio = 0.3,  # Делаем график вытянутым прямоугольником (ширина > высоты)\n    plot.margin = margin(5, 10, 5, 5, \"pt\")  # Убираем лишние отступы вокруг графика\n  )\n# ========================================================================================================================\n# ДИНАМИКА ИНДЕКСОВ (ПРЕРЕКРУТЫ, РЕКРУТЫ, ПОСТРЕКРУТЫ) МОДЕЛЬНЫХ И ФАКТИЧЕСКИХ (ТОЧКИ)\n# ========================================================================================================================\n# Три графика динамики P1, R, P: медиана (линия), 95% ДИ (лента), точки — наблюдения,\n# приведённые к единому масштабу  делением на медиану q (Posterior median).\n# ========================================================================================================================\nif (!exists(\"YEAR\")) YEAR <- 2000 + 0:(data_list$N - 1)\ndraws_mat <- as.matrix(samps)\n\nseries_summary <- function(varname, obs_vec, qname, series_label) {\n  med_q <- median(draws_mat[, qname], na.rm = TRUE)\n  rows <- vector(\"list\", length(obs_vec))\n  for (i in seq_along(obs_vec)) {\n    rn <- paste0(varname, \"[\", i, \"]\")\n    if (!rn %in% colnames(draws_mat)) next\n    v <- draws_mat[, rn]\n    qs <- quantile(v, c(0.025, 0.5, 0.975), na.rm = TRUE)\n    obs_state <- if (!is.na(obs_vec[i])) obs_vec[i] / med_q else NA_real_\n    rows[[i]] <- data.frame(\n      YEAR = YEAR[i],\n      series = series_label,\n      median = qs[2],\n      lo = qs[1],\n      hi = qs[3],\n      obs = obs_state\n    )\n  }\n  do.call(rbind, rows)\n}\n\ndf_p1 <- series_summary(\"P1\", data_list$bioindexP1, \"q1\", \"P1\")\ndf_r  <- series_summary(\"R\",  data_list$bioindexR,  \"q2\", \"R\")\ndf_p  <- series_summary(\"P\",  data_list$bioindexP,  \"q3\", \"P\")\n\n\np_P1 <- ggplot(df_p1, aes(x = YEAR)) +\n  geom_ribbon(aes(ymin = lo, ymax = hi), fill = \"#1f77b4\", alpha = 0.2) +\n  geom_line(aes(y = median), color = \"#1f77b4\", linewidth = 1) +\n  geom_point(aes(y = obs), shape = 21, size = 2, color = \"black\", fill = \"white\", na.rm = TRUE) +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  labs(title = \"Моделируемая и фактическая (точки) динамика пререкрутов\", x = \"Годы\", y = \"Пререкруты (экз.)\") +\n  theme_minimal(base_size = 12)\n\nprint(p_P1)\n\np_R <- ggplot(df_r, aes(x = YEAR)) +\n  geom_ribbon(aes(ymin = lo, ymax = hi), fill = \"#2ca02c\", alpha = 0.2) +\n  geom_line(aes(y = median), color = \"#2ca02c\", linewidth = 1) +\n  geom_point(aes(y = obs), shape = 21, size = 2, color = \"black\", fill = \"white\", na.rm = TRUE) +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  labs(title = \"Моделируемая и фактическая (точки) динамика рекрутов\", x = \"Годы\", y = \"Рекруты (экз.)\") +\n  theme_minimal(base_size = 12)\n\nprint(p_R)\n\np_P <- ggplot(df_p, aes(x = YEAR)) +\n  geom_ribbon(aes(ymin = lo, ymax = hi), fill = \"#ff7f0e\", alpha = 0.2) +\n  geom_line(aes(y = median), color = \"#ff7f0e\", linewidth = 1) +\n  geom_point(aes(y = obs), shape = 21, size = 2, color = \"black\", fill = \"white\", na.rm = TRUE) +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  labs(title = \"Моделируемая и фактическая (точки) динамика пострекрутов\", x = \"Годы\", y = \"Пострекруты (экз.)\") +\n  theme_minimal(base_size = 12)\n\nprint(p_P)\n```\n","srcMarkdownNoYaml":"\n\n## Введение\n\nМодель \"анализа уловов и съемок\" - Catch-Survey Analysis (CSA) представляет собой инструмент для оценки состояния запасов, особенно тех видов, данные по индивидуальному возрасту которых труднодоступны или отсутствуют, что типично для многих беспозвоночных, таких как крабы, креветки, а также для некоторых рыб. В отличие от классических продукционных моделей, которые оперируют агрегированными показателями всей популяции и требуют строгих допущений о ее равновесном состоянии и постоянной емкости среды, когортные модели, подобные CSA, позволяют отслеживать судьбу отдельных функциональных категорий (например, пререкруты, рекруты, пострекруты). Они явным образом учитывают такие процессы, как рост, пополнение и естественная смертность, разделяя запас на дискретные размерные или возрастные группы. Это дает несомненное преимущество при анализе динамики популяций с выраженной цикличностью или тех, которые подвергаются интенсивному промысловому прессу, избирательно воздействующему на определенные размерные или возрастные категории (например, пререкруты не подвержены прямой прмысловой смертности в отличие от рекрутов и посрекрутов). Подробнее о модели и ее реализации можно почитать в статье [\"Результаты применения стохастической когортной модели CSA для оценки запаса камчатского краба Paralithodes camtschaticus в Баренцевом море\"](https://mombus.github.io/cRab/data/CSA.pdf). В статье описывается реализация модели в программе OpenBUGS, которая в упрощенном виде (без прогноза, риск-анализа и диагностики) и в учебных целях была переведена в среду R и представлена ниже, а полный срипт [здесь](https://mombus.github.io/cRab/data/CSA.R).Также доступна иммитационная CSA модель для 4 размерных групп, реализованная в MS Excel по [ссылке](https://mombus.github.io/cRab/data/CSA.xlsx).\n\nДанная реализация модели представляет собой байесовский подход к оценке запасов, который позволяет учитывать неопределенности как в процессе динамики популяции, так и в процессе наблюдений, что особенно важно при работе с данными, характеризующимися высокой вариабельностью и неполнотой. В основе модели лежит разделение популяции на три размерно-возрастные группы: пререкруты (P1), рекруты (R) и пострекруты (P), что соответствует биологическим особенностям многих видов крабов, включая камчатского краба. Модель включает два основных компонента: динамику процесса, описывающую естественные изменения численности популяции, и модель наблюдений, связывающую ненаблюдаемые \"истинную\" численность запаса с доступными данными съемок (индексами численности пререкрутов, рекрутов и пострекрутов). Уравнения процессной динамики для пострекрутов имеют вид:\n\nP\\[i\\] = \\[(P1\\[i-1\\]×Gp×Mp) + R\\[i-1\\] + P\\[i-1\\] - catch\\[i-1\\]\\] × exp(-M) + εP, где\n\nGp обозначает вероятность перехода пререкрутов в пострекруты,\n\nMp - вероятность линьки пререкрутов,\n\nM - коэффициент естественной смертности, а εP представляет собой процессную ошибку.\n\nДля рекрутов уравнение динамики выглядит как\n\nR\\[i\\] = (P1\\[i-1\\]×Gr×Mp) × exp(-M) + εR, где\n\nGr - вероятность перехода пререкрутов в рекруты. Динамика пререкрутов моделируется как лог-случайное блуждание P1\\[i\\] = P1\\[i-1\\] + εP1. Модель наблюдений предполагает, что данные траловых съемок соответствуют логнормальному распределению относительно истинной численности, умноженной на коэффициент улавливаемости:\n\nbioindexP1\\[i\\] \\~ lognormal(log(q1×P1\\[i\\]), precbioindexP1),\n\nаналогично для рекрутов и пострекрутов, где q1, q2, q3 - коэффициенты улавливаемости для каждой группы, а precbioindex - параметры точности. В байесовском подходе ключевую роль играют априорные распределения параметров, которые в данной реализации задаются как равномерные для коэффициентов улавливаемости (q1, q2, q3 \\~ dunif(0.1,1)), нормальные для вероятностей перехода (Gr \\~ dnorm(0.9,500), Gp \\~ dnorm(0.075,500), Mp \\~ dnorm(0.95,500)) и для коэффициента естественной смертности (M \\~ dnorm(0.2,100)). Использование байесовского подхода позволяет не только получить точечные оценки параметров, но и оценить полные апостериорные распределения, что дает возможность проводить риск-анализ различных сценариев управления запасом. В данном занятии мы реализуем модель CSA в среде R с использованием пакетов rjags и coda, что позволяет эффективно работать с байесовскими иерархическими моделями через интерфейс с программой JAGS, которую также необходимо установить.\n\nМы рассмотрим полный цикл работы с моделью: от подготовки данных и задания априорных распределений до обучения модели и анализа результатов, включая визуализацию априорных и апостериорных распределений параметров, анализ остатков и сравнение моделируемой и фактической динамики запаса. Особое внимание будет уделено интерпретации результатов в контексте управления водными биоресурсами, что является ключевой целью применения подобных моделей в практической деятельности гидробиологов и ихтиологов. \\## Загрузка данных и первичный осмотр\n\n## Реализация модели\n\n```{r}\n# ========================================================================================================================\n# ПРАКТИЧЕСКОЕ ЗАНЯТИЕ: МОДЕЛЬ Catch-Survey Analysis (CSA) - три категории (пререкруты (P1), рекруты (R), пострекруты (P)\n# Курс: \"Оценка водных биоресурсов в среде R (для начинающих)\"\n# Автор: Баканев С. В. Дата: 20.08.2025\n# Структура:\n# 1) Входные данные\n# 2) Модель\n# 3) Прайеры\n# 4) Обучение модели\n# 5) Подготовка выходных данных \n# 6) Анализ результатов (визуализация априорных и апостериорных параметров;бабл-плоты остатков;  динамика индексов) \n# ========================================================================================================================\n# Установка рабочей директории\nsetwd(\"C:/CSA\")\n\n# Подключение необходимых библиотек\n# install.packages(c(\"rjags\", \"coda\"))  # Раскомментировать для установки\nlibrary(rjags)  # Для работы с JAGS\nlibrary(coda)   # Для анализа MCMC-выхода\nlibrary(ggplot2)# Рисунки\n\n# ========================================================================================================================\n# --- Входные данные ---\n# ========================================================================================================================\ndata_list <- list(\n  N = 16,# Количество временных точек\n # Наблюдаемые данные (индексы запаса)\n  bioindexP1 = c(1500,1028,554,887,1345,1817,2291,1958,1500,1028,554,887,1345,1817,2291,1958),\n  bioindexR  = c(2531,1927,1305,764,1216,\t1820,2442,2983,2531,1927,1305,764,1216,1820,2442,2983),\n  bioindexP  = c(13741,13770,13060,11653,9782,8634,8321,8793,9809,10177,9776,9566,8789,8640,9240,10547),\n  catch      = c(6,2,6,15,21,37,37,315,945,890,991,1060,1000,1000,1600,1673,1250)\n)\n\n# Создание вектора лет для подписей\nYEAR <- 2000 + 0:(data_list$N - 1)\n\n# ========================================================================================================================\n# --- Генерация модели CSA --\n# ========================================================================================================================\nmodel_string <- \"\nmodel {\n # Модель наблюдений (связь ненаблюдаемых состояний с данными)\n  for (i in 1:N) {\n    # Медиана для P1 в лог-нормальном распределении\n    bioindexP1med[i] <- log(1.0E-6 + q1 * P1[i])\n    # Наблюдения для P1 следуют лог-нормальному распределению\n    bioindexP1[i] ~ dlnorm(bioindexP1med[i], precbioindexP1)\n\n    # Аналогично для R\n    bioindexRmed[i]  <- log(1.0E-6 + q2 * R[i])\n    bioindexR[i] ~ dlnorm(bioindexRmed[i],  precbioindexR)\n\n    # Аналогично для P\n    bioindexPmed[i]  <- log(1.0E-6 + q3 * P[i])\n    bioindexP[i] ~ dlnorm(bioindexPmed[i],  precbioindexP)\n  }\n\n  # Динамика состояний (модель процесса)\n  inv_surv <- exp(-M)# Коэффициент естественной смертности\n  for (i in 2:N) {\n    # Динамика для P (с защитой от отрицательных значений)\n    tmpPraw[i] <- (P1[i-1]*Gp*Mp + R[i-1] + P[i-1] - catch[i-1]) * inv_surv\n    tmpPpos[i] <- tmpPraw[i] * step(tmpPraw[i]) # Обнуляем если отрицательный\n    Pmed[i] <- log(1.0E-6 + tmpPpos[i])# Медиана в лог-пространстве\n    P[i] ~ dlnorm(Pmed[i], precP)# Процессная ошибка для P\n\n    # Динамика для R (аналогично P)\n    tmpRraw[i] <- (P1[i-1]*Gr*Mp) * inv_surv\n    tmpRpos[i] <- tmpRraw[i] * step(tmpRraw[i])\n    Rmed[i] <- log(1.0E-6 + tmpRpos[i])\n    R[i] ~ dlnorm(Rmed[i], precR)\n\n   # Динамика для P1 (лог-случайное блуждание)\n    P1med[i] <- log(1.0E-6 + P1[i-1])\n    P1[i] ~ dlnorm(P1med[i], precP1)\n  }\n\n  # Risk\n  for (i in 1:N) {\n    PR[i] <- P[i] + R[i]\n    p.PRlim[i] <- step(PRlim - PR[i])\n  }\n  PRlim <- 4000\n\n# ========================================================================================================================\n#       ПРАЙЕРЫ - PRIORS\n# ========================================================================================================================\n  #  # Априорные распределения параметров (Priors)\n  P1[1] ~ dunif(200,4000)\n  P[1]  ~ dunif(200,6000)\n  R[1]  ~ dunif(200,25000)\n\n  Gr ~ dnorm(0.9,  500)\n  Gp ~ dnorm(0.075,500)\n  Mp ~ dnorm(0.95, 500)\n\n # Точности для ошибок наблюдений\n  precbioindexP1 ~ dgamma(12.22, 1.1)\n  precbioindexR  ~ dgamma(12.22, 1.1)\n  precbioindexP  ~ dgamma(12.22, 1.1)\n\n #Прайеры для коэффициентов улавливаемости (catchability)\n  q1 ~ dunif(0.1,1)\n  q2 ~ dunif(0.1,1)\n  q3 ~ dunif(0.1,1) \n\n  # Точности для ошибок процесса\n  precP1 ~ dgamma(12.22, 1.1)\n  precR  ~ dgamma(12.22, 1.1)\n  precP  ~ dgamma(12.22, 1.1)\n\n# Прайер для коэффициента естественной смертности\n  M ~ dnorm(0.2, 100)\n}\n\"\n\n\n# ========================================================================================================================\n# --- Обучение модели ---\n# ========================================================================================================================\nset.seed(1)  # Для воспроизводимости\n# Инициализация модели JAGS\njm <- jags.model(\n  textConnection(model_string),  # Модель из строки\n  data = data_list,             # Данные\n  n.chains = 3,                 # Количество цепей\n  n.adapt = 1500                # Длина адаптационной фазы\n)\n# Обновление модели (burn-in)\nupdate(jm, 4000)\n\n# Переменные для мониторинга\nvars_to_monitor <- c(\n  \"M\",\"Gp\",\"Gr\",\"Mp\",\"q1\",\"q2\",\"q3\",                    # Параметры\n  \"precP\",\"precP1\",\"precR\",\"precbioindexP\",\"precbioindexP1\",\"precbioindexR\",  # Точности\n  \"P\",\"P1\",\"R\",\"PR\",\"p.PRlim\"                           # Состояния и производные\n)\n\n\n# Генерация MCMC-выборок\nsamps <- coda.samples(\n  jm, \n  variable.names = vars_to_monitor,  # Мониторируемые переменные\n  n.iter = 6000,                     # Длина выборки\n  thin = 3                           # Прореживание\n)\n# ========================================================================================================================\n# --- Анализ результатов ---\n# ========================================================================================================================\n# Стандартная статистика по выборкам\nsm <- summary(samps)\nstats <- sm$statistics   # Средние, SD, стандартные ошибки\nquants <- sm$quantiles   # Квантили (2.5%, 25%, 50%, 75%, 97.5%)\n\n# Матрица всех сэмплов для ручных вычислений\ndraws_mat <- as.matrix(samps)\n\n# Функция для расчета MC ошибки через эффективный размер выборки\nmcse_from_ess <- function(vec) {\n  ess <- effectiveSize(as.mcmc(vec))  # Эффективный размер выборки\n  sd(vec) / sqrt(as.numeric(ess))     # MC ошибка\n}\n\n# Функция для создания строки результата\nmake_row <- function(year, mapping, node, mean, sd, mcse, q2.5, q25, q50, q75, q97.5) {\n  data.frame(\n    YEAR = year,\n    `#Vectors to monitor` = mapping,\n    node = node,\n    mean = mean,\n    sd = sd,\n    `MC error` = mcse,\n    `2.50%` = q2.5,\n    `25.00%` = q25,\n    median = q50,\n    `75.00%` = q75,\n    `97.50%` = q97.5,\n    check.names = FALSE\n  )\n}\n\n# Список для накопления результатов\nrows <- list()\n\n# Функция добавления скалярных параметров\nadd_scalar <- function(x_idx, vname) {\n  if (vname %in% rownames(stats)) {\n    # Если параметр есть в готовой статистике\n    m <- stats[vname, \"Mean\"]\n    s <- stats[vname, \"SD\"]\n    mcse <- mcse_from_ess(draws_mat[, vname])\n    q <- quants[vname, c(\"2.5%\", \"25%\", \"50%\", \"75%\", \"97.5%\")]\n    rows[[length(rows) + 1]] <<- make_row(NA, paste0(\"x[\", x_idx, \"]<-\", vname), paste0(\"x[\", x_idx, \"]\"),\n                                          m, s, mcse, q[1], q[2], q[3], q[4], q[5])\n  } else if (vname %in% c(\"sigmaP1\",\"sigmaR\",\"sigmaP\")) {\n    # Для стандартных отклонений (преобразуем из точности)\n    src <- switch(vname,\n                  sigmaP1 = \"precP1\",\n                  sigmaR  = \"precR\",\n                  sigmaP  = \"precP\")\n    if (src %in% colnames(draws_mat)) {\n      vec <- sqrt(1 / draws_mat[, src])  # Преобразование precision -> sigma\n      m <- mean(vec); s <- sd(vec); mcse <- mcse_from_ess(vec)\n      q <- quantile(vec, c(0.025,0.25,0.5,0.75,0.975))\n      rows[[length(rows) + 1]] <<- make_row(NA, paste0(\"x[\", x_idx, \"]<-\", vname), paste0(\"x[\", x_idx, \"]\"),\n                                            m, s, mcse, q[1], q[2], q[3], q[4], q[5])\n    }\n  }\n}\n\n# Добавление основных параметров\nadd_scalar(1,  \"M\")\nadd_scalar(2,  \"q1\")\nadd_scalar(3,  \"q2\")\nadd_scalar(4,  \"q3\")\nadd_scalar(5,  \"sigmaP1\")\nadd_scalar(6,  \"sigmaR\")\nadd_scalar(7,  \"sigmaP\")\nadd_scalar(8,  \"precbioindexP1\")\nadd_scalar(9,  \"precbioindexR\")\nadd_scalar(10, \"precbioindexP\")\nadd_scalar(11, \"Gr\")\nadd_scalar(12, \"Gp\")\nadd_scalar(13, \"Mp\")\n\n# Функция добавления временных рядов\nadd_series <- function(base_idx, varname, years) {\n  for (i in seq_along(years)) {\n    rn <- paste0(varname, \"[\", i, \"]\")  # Имя переменной с индексом\n    if (!rn %in% rownames(stats)) next  # Пропуск если нет данных\n    m <- stats[rn, \"Mean\"]\n    s <- stats[rn, \"SD\"]\n    mcse <- mcse_from_ess(draws_mat[, rn])\n    q <- quants[rn, c(\"2.5%\", \"25%\", \"50%\", \"75%\", \"97.5%\")]\n    xi <- base_idx + (i - 1)  # Вычисление индекса в выходной таблице\n    rows[[length(rows) + 1]] <<- make_row(years[i], paste0(\"x[\", xi, \"]<-\", rn), paste0(\"x[\", xi, \"]\"),\n                                          m, s, mcse, q[1], q[2], q[3], q[4], q[5])\n  }\n}\n\n# Добавление временных рядов\nadd_series(100, \"P1\", YEAR)\nadd_series(200, \"R\",  YEAR)\nadd_series(300, \"P\",  YEAR)\n\n# Создание итоговой таблицы\nout_df <- do.call(rbind, rows)\n\n# Создание групп для сортировки\nout_df$group <- ifelse(is.na(out_df$YEAR), \"param\",\n                ifelse(grepl(\"<-P1\\\\[\", out_df$`#Vectors to monitor`), \"P1\",\n                ifelse(grepl(\"<-R\\\\[\",  out_df$`#Vectors to monitor`), \"R\", \"P\")))\n\n# Сортировка параметров по индексу\nparam_rows <- out_df[out_df$group == \"param\", ]\nparam_idx  <- as.numeric(sub(\".*\\\\[(\\\\d+)\\\\].*\", \"\\\\1\", param_rows$node))\nparam_rows <- param_rows[order(param_idx), ]\n\n# Сортировка временных рядов по году\np1_rows <- out_df[out_df$group == \"P1\", ]\np1_rows <- p1_rows[order(p1_rows$YEAR), ]\n\nr_rows  <- out_df[out_df$group == \"R\", ]\nr_rows  <- r_rows[order(r_rows$YEAR), ]\n\np_rows  <- out_df[out_df$group == \"P\", ]\np_rows  <- p_rows[order(p_rows$YEAR), ]\n\n# Компоновка финальной таблицы\nout_df <- rbind(param_rows, p1_rows, r_rows, p_rows)\nout_df$group <- NULL  # Удаление вспомогательной колонки\n\n# Сохранение результатов\nwrite.csv(out_df, \"monitor_summary.csv\", row.names = FALSE)\ncat(\"Saved: monitor_summary.csv\\n\")\n\n# Вывод структуры результатов\nstr(out_df)\n\n# ========================================================================================================================\n# Визуализация априорных и апостериорных параметров\n# Параметры: M, Gp, Gr, Mp, q1, q2, q3, precP1, precR, precP, precbioindexP1, precbioindexR, precbioindexP\n# И производные: sigmaP1, sigmaR, sigmaP\n# ========================================================================================================================\n\n# Сэмплируем приоры прямо из той же JAGS-модели (без данных)\nsample_priors_from_model <- function(model_string, n_iter = 20000, n_adapt = 500) {\n  jm_prior <- jags.model(textConnection(model_string), data = list(N = 0), n.chains = 1, n.adapt = n_adapt)\n  vars <- c(\"M\",\"Gp\",\"Gr\",\"Mp\",\"q1\",\"q2\",\"q3\",\n            \"precP1\",\"precR\",\"precP\",\"precbioindexP1\",\"precbioindexR\",\"precbioindexP\")\n  priors <- coda.samples(jm_prior, variable.names = vars, n.iter = n_iter)\n  as.matrix(priors)\n}\n\n# Получаем матрицы приоров и постериоров\nprior_mat <- sample_priors_from_model(model_string, n_iter = 20000, n_adapt = 500)\npost_mat  <- as.matrix(samps)\n\n# Добавляем производные сигмы из прецизионов\nadd_sigmas <- function(mat) {\n  add <- function(dst, src) {\n    if (all(src %in% colnames(mat))) dst <- cbind(dst, setNames(as.data.frame(sqrt(1/mat[, src, drop=FALSE])), gsub(\"^prec\",\"sigma\", src)))\n    dst\n  }\n  out <- mat\n  out <- add(out, c(\"precP1\"))\n  out <- add(out, c(\"precR\"))\n  out <- add(out, c(\"precP\"))\n  out\n}\nprior_mat <- add_sigmas(prior_mat)\npost_mat  <- add_sigmas(post_mat)\n\n# Список параметров для визуализации\nparams <- intersect(\n  c(\"M\",\"Gp\",\"Gr\",\"Mp\",\"q1\",\"q2\",\"q3\",\n    \"sigmaP1\",\"sigmaR\",\"sigmaP\",\n    \"precbioindexP1\",\"precbioindexR\",\"precbioindexP\"),\n  union(colnames(prior_mat), colnames(post_mat))\n)\n\n# В long-формат\nmk_df <- function(mat, label) {\n  if (is.null(mat) || nrow(mat) == 0) return(data.frame())\n  mat <- mat[, intersect(colnames(mat), params), drop = FALSE]\n  reshape(\n    data.frame(iter = seq_len(nrow(mat)), mat, check.names = FALSE),\n    direction = \"long\", varying = params, v.names = \"value\", timevar = \"param\", times = params\n  )[, c(\"param\",\"value\")]\n}\nprior_df <- mk_df(prior_mat, \"Prior\"); prior_df$dist <- \"Prior\"\npost_df  <- mk_df(post_mat,  \"Posterior\"); post_df$dist <- \"Posterior\"\nplot_df  <- rbind(prior_df, post_df)\n\n# Подписи\nparam_labels <- c(\n  M=\"M (mortality)\", Gp=\"Gp\", Gr=\"Gr\", Mp=\"Mp\",\n  q1=\"q1\", q2=\"q2\", q3=\"q3\",\n  sigmaP1=\"sigmaP1\", sigmaR=\"sigmaR\", sigmaP=\"sigmaP\",\n  precbioindexP1=\"precbioindexP1\", precbioindexR=\"precbioindexR\", precbioindexP=\"precbioindexP\"\n)\nplot_df$param_f <- factor(plot_df$param, levels = params, labels = unname(param_labels[params]))\n\n# График prior vs posterior (берёт priors из модели!)\nlibrary(ggplot2)\nggplot(plot_df, aes(x = value, color = dist, fill = dist)) +\n  geom_density(alpha = 0.25, linewidth = 0.7) +\n  facet_wrap(~ param_f, scales = \"free\", ncol = 4) +\n  scale_color_manual(values = c(\"Prior\" = \"#999999\", \"Posterior\" = \"#1b9e77\")) +\n  scale_fill_manual(values  = c(\"Prior\" = \"#bbbbbb\", \"Posterior\" = \"#1b9e77\")) +\n  labs(title = \"Априорные (из модели) vs апостериорные распределения\",\n       x = \"Значение\", y = \"Плотность\", color = \"\", fill = \"\") +\n  theme_minimal(base_size = 12) +\n  theme(legend.position = \"top\")\n\n\n# ========================================================================================================================\n# Бабл-плоты остатков P1, R, P по годам (2000–2015)\n# Требуется: объекты samps, data_list. Если YEAR не создан, создадим.\n# ========================================================================================================================\n\nif (!exists(\"YEAR\")) YEAR <- 2000 + 0:(data_list$N - 1)\ndraws_mat <- as.matrix(samps)\neps <- 1.0e-6\n\nresid_bubble_summary <- function(series, obs_vec, q_name, state_name_prefix) {\n  rows <- list()\n  for (i in seq_along(obs_vec)) {\n    if (is.na(obs_vec[i])) next\n    q_draws     <- draws_mat[, q_name]\n    state_draws <- draws_mat[, paste0(state_name_prefix, \"[\", i, \"]\")]\n    # residual per draw: log(observed) - log(expected)\n    res_draws <- log(obs_vec[i]) - log(eps + q_draws * state_draws)\n    r_mean <- mean(res_draws, na.rm = TRUE)\n    rows[[length(rows) + 1]] <- data.frame(\n      YEAR = YEAR[i],\n      series = series,\n      resid = r_mean,\n      abs_resid = abs(r_mean),\n      sign = ifelse(r_mean >= 0, \"pos\", \"neg\")\n    )\n  }\n  do.call(rbind, rows)\n}\n\nb1 <- resid_bubble_summary(\"P1\", data_list$bioindexP1, \"q1\", \"P1\")\nb2 <- resid_bubble_summary(\"R\",  data_list$bioindexR,  \"q2\", \"R\")\nb3 <- resid_bubble_summary(\"P\",  data_list$bioindexP,  \"q3\", \"P\")\nbubbles <- rbind(b1, b2, b3)\n\n# Порядок рядов сверху вниз: P1, R, P\nbubbles$series <- factor(bubbles$series, levels = c(\"P1\", \"R\", \"P\"))\n\n# Убираем пустое расстояние - используем минимальные интервалы\nlvl <- c(\"P1\",\"R\",\"P\")\ny_map <- setNames(c(1, 2, 3), lvl)  # Числовые позиции без больших промежутков\n\nbubbles$y_pos <- unname(y_map[as.character(bubbles$series)])\n\n# Создаем вытянутый прямоугольный график\nggplot(bubbles, aes(x = YEAR, y = y_pos)) +\n  geom_point(aes(size = abs_resid, fill = sign), shape = 21, color = \"black\", alpha = 0.9) +\n  scale_fill_manual(values = c(neg = \"black\", pos = \"white\"),\n                    breaks = c(\"pos\",\"neg\"),\n                    labels = c(\"положительные\",\"отрицательные\"),\n                    name = \"\") +\n  scale_size_area(max_size = 12, name = \"Остатки\") +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  scale_y_continuous(breaks = unname(y_map), \n                     labels = names(y_map),\n                     limits = c(0.5, 3.5),  # Убираем пустое пространство сверху и снизу\n                     expand = c(0, 0)) +     # Убираем расширение осей\n  labs(title = \"Пузырьковая диаграмма остатков (лог-шкала): P1, R, P\", \n       x = \"Год\", \n       y = \"\") +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = \"top\",\n    panel.grid.major.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    aspect.ratio = 0.3,  # Делаем график вытянутым прямоугольником (ширина > высоты)\n    plot.margin = margin(5, 10, 5, 5, \"pt\")  # Убираем лишние отступы вокруг графика\n  )\n# ========================================================================================================================\n# ДИНАМИКА ИНДЕКСОВ (ПРЕРЕКРУТЫ, РЕКРУТЫ, ПОСТРЕКРУТЫ) МОДЕЛЬНЫХ И ФАКТИЧЕСКИХ (ТОЧКИ)\n# ========================================================================================================================\n# Три графика динамики P1, R, P: медиана (линия), 95% ДИ (лента), точки — наблюдения,\n# приведённые к единому масштабу  делением на медиану q (Posterior median).\n# ========================================================================================================================\nif (!exists(\"YEAR\")) YEAR <- 2000 + 0:(data_list$N - 1)\ndraws_mat <- as.matrix(samps)\n\nseries_summary <- function(varname, obs_vec, qname, series_label) {\n  med_q <- median(draws_mat[, qname], na.rm = TRUE)\n  rows <- vector(\"list\", length(obs_vec))\n  for (i in seq_along(obs_vec)) {\n    rn <- paste0(varname, \"[\", i, \"]\")\n    if (!rn %in% colnames(draws_mat)) next\n    v <- draws_mat[, rn]\n    qs <- quantile(v, c(0.025, 0.5, 0.975), na.rm = TRUE)\n    obs_state <- if (!is.na(obs_vec[i])) obs_vec[i] / med_q else NA_real_\n    rows[[i]] <- data.frame(\n      YEAR = YEAR[i],\n      series = series_label,\n      median = qs[2],\n      lo = qs[1],\n      hi = qs[3],\n      obs = obs_state\n    )\n  }\n  do.call(rbind, rows)\n}\n\ndf_p1 <- series_summary(\"P1\", data_list$bioindexP1, \"q1\", \"P1\")\ndf_r  <- series_summary(\"R\",  data_list$bioindexR,  \"q2\", \"R\")\ndf_p  <- series_summary(\"P\",  data_list$bioindexP,  \"q3\", \"P\")\n\n\np_P1 <- ggplot(df_p1, aes(x = YEAR)) +\n  geom_ribbon(aes(ymin = lo, ymax = hi), fill = \"#1f77b4\", alpha = 0.2) +\n  geom_line(aes(y = median), color = \"#1f77b4\", linewidth = 1) +\n  geom_point(aes(y = obs), shape = 21, size = 2, color = \"black\", fill = \"white\", na.rm = TRUE) +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  labs(title = \"Моделируемая и фактическая (точки) динамика пререкрутов\", x = \"Годы\", y = \"Пререкруты (экз.)\") +\n  theme_minimal(base_size = 12)\n\nprint(p_P1)\n\np_R <- ggplot(df_r, aes(x = YEAR)) +\n  geom_ribbon(aes(ymin = lo, ymax = hi), fill = \"#2ca02c\", alpha = 0.2) +\n  geom_line(aes(y = median), color = \"#2ca02c\", linewidth = 1) +\n  geom_point(aes(y = obs), shape = 21, size = 2, color = \"black\", fill = \"white\", na.rm = TRUE) +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  labs(title = \"Моделируемая и фактическая (точки) динамика рекрутов\", x = \"Годы\", y = \"Рекруты (экз.)\") +\n  theme_minimal(base_size = 12)\n\nprint(p_R)\n\np_P <- ggplot(df_p, aes(x = YEAR)) +\n  geom_ribbon(aes(ymin = lo, ymax = hi), fill = \"#ff7f0e\", alpha = 0.2) +\n  geom_line(aes(y = median), color = \"#ff7f0e\", linewidth = 1) +\n  geom_point(aes(y = obs), shape = 21, size = 2, color = \"black\", fill = \"white\", na.rm = TRUE) +\n  scale_x_continuous(breaks = seq(2000, 2015, by = 2), limits = c(2000, 2015)) +\n  labs(title = \"Моделируемая и фактическая (точки) динамика пострекрутов\", x = \"Годы\", y = \"Пострекруты (экз.)\") +\n  theme_minimal(base_size = 12)\n\nprint(p_P)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"chapter 8.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.29","bibliography":["references.bib"],"editor":"visual","theme":["cosmo","brand"],"title":"Модель Catch-Survey Analysis (CSA)"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"chapter 8.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt","title":"Модель Catch-Survey Analysis (CSA)"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}